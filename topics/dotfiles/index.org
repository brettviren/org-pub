#+TITLE: Managing dot-files
#+SUBTITLE: Taming user configuration.
#+CATEGORY: software
#+TAGS: unix, git, configuration, shell, emacs
#+DATE: [2015-09-20 Sun 11:14]
#+DESCRIPTION: This topic describes how application and user account configuration (dotfiles) is managed.
#+SETUPFILE: ~/org-pub/topics/setup.org

* The problem

Like most people nowadays, I have multiple accounts on multiple computers serving multiple uses.  As new accounts are created, new computers purchased, new configuration created, it's challenging to keep it all synchronized.  In the past I've tried a scheme of various and independent git repositories holding configuration files and ad-hoc methods to "hook" them into where they need to be found.  This sort of works but the various clones are always diverging and new accounts take effort to set up.

* The solution

Obviously, this is not a unique problem and good effort has been done to try and solve it.  For my next iteration I am taking an approach based on [[http://www.martin-burger.net/blog/unix-shell/manage-dotfiles-quickly-and-effortlessly/][this nice blog post]]. It includes these ingredients

 - [[https://github.com/RichiH/vcsh][vcsh]] :: to allow multiple git repos to "overlap" in =$HOME=
 - [[https://myrepos.branchable.com/][myrepos]] :: to efficiently keep these repos in sync 
 - [[http://gitolite.com][gitolite]] :: to give me private git hosting
 - and of course bash, emacs, ssh, git, etc.

It is only after working through this approach did I really begin to appreciate it.  

* First Time Setup

Initial bootstrapping of this is described here.  Two computers are involved:

- hal :: laptop
- haiku :: server 

A gitolite3 server is set up on =haiku= to hold various git repos, one per application.  Then vcsh and myrepos are configured on the =hal=.

** Prep SSH

Too many SSH keys means SSH connection failures if the correct key isn't used within the first ~3 tries.  So, configure SSH on =hal= to explicitly use a key for accessing gitolite3's admin user.  The host defined here will be used to access gitolite.

#+BEGIN_EXAMPLE
  $ cat <EOF >> ~/.ssh/config
  Host gitolite-haiku-admin
       User gitolite3
       Hostname haiku
       ForwardAgent no
       ForwardX11 no     
       IdentityFile ~/.ssh/gitolite-server
  Host gitolite-haiku
       User gitolite3
       Hostname haiku
       ForwardAgent no
       ForwardX11 no     
       IdentityFile ~/.ssh/id_rsa
  EOF
#+END_EXAMPLE

** gitolite3

Install gitolite3 on my home =haiku= server, using =~/.ssh/gitolite-server.pub= as the admin key.

#+BEGIN_EXAMPLE
  $ git clone gitolite-haiku-admin:gitolite-admin gitolite-admin-haiku
#+END_EXAMPLE

Add my user key some =dot-*= repos, starting with one to hold =.bbdb= as a simple example.

#+BEGIN_EXAMPLE
  $ cp ~/.ssh/id_rsa.pub keydir/bv.pub
  $ git add keydir/bv.pub
  $ cat <EOF >> conf/gitolite.conf
  repo dot-bbdb
      RW+ = bv
  repo dot-myrepos
      RW+ = bv
  EOF
  $ git commit -a -m "Start up."
  $ git push
#+END_EXAMPLE

** =vcsh= and first dotfile

On =hal= install vcsh, initialize a repo for bbdb:

#+BEGIN_EXAMPLE
  $ sudo apt-get install vcsh
  $ vcsh init bbdb
  $ vcsh bbdb add .bbdb
  $ vcsh bbdb commit -m "First commit"
  $ vcsh bbdb remote add origin gitolite-haiku:dot-bbdb
  $ vcsh bbdb push -u origin master
  $ cat <EOF >> ~/.gitignore.d/bbdb
  ,*
  !/.bbdb
  EOF
  $ vcsh bbdb status
  On branch master
  Your branch is up-to-date with 'origin/master'.
  nothing to commit, working directory clean
#+END_EXAMPLE

** =myrepo=

#+BEGIN_EXAMPLE
  $ cd ~
  $ vcsh clone git@github.com:RichiH/vcsh_mr_template.git mr
  $ vcsh mr remote set-url origin gitolite-haiku:dot-myrepos
#+END_EXAMPLE

Also edit =~/.config/mr/available.d/mr.vcsh= to have this new repo.  Likewise, add a =mr= config fragment for =bbdb=:

#+BEGIN_EXAMPLE
  $ cat .config/mr/available.d/bbdb.vcsh 
  [$HOME/.config/vcsh/repo.d/bbdb.git]
  checkout = vcsh clone gitolite-haiku:dot-bbdb bbdb
  $ cd .config/mr/config.d/
  $ ln -s ../available.d/bbdb.vcsh .
  $ mr status
  $ mr commit -m "..."
  $ mr push
#+END_EXAMPLE

** =ssh=

One more example.  SSH is a whole config world unto itself.  See [[../ssh-keys][this topic]].

#+BEGIN_EXAMPLE
  $ vcsh init ssh
  $ vcsh ssh add .ssh/.gitignore ...
  $ vcsh ssh commit -m '...'
  $ vcsh ssh remote add origin gitolite-haiku:dot-ssh
  $ vcsh ssh push -u origin master
#+END_EXAMPLE

Also tweak:

- =.config/mr/*.d/=
- =.gitignore.d/ssh=

* Bootstrap new account

First one may need to add a new client's SSH key to gitolite:

#+BEGIN_EXAMPLE
  $ cd gitolite-admin-haiku
  $ cp /path/to/key.pub keydir/<client>/<user>.pub
  $ emacs conf/gitolite.conf   #<-- only if <user> is new
  $ git add keydir/<client>/<user>.pub
  $ git commit ...
  $ git push
#+END_EXAMPLE

Then,
there is a bit of a catch-22 bootstrap issue as we need ssh config to access the dot files git repos properly but we can't get that until we get dot-ssh.  This breaks the loop:

#+BEGIN_EXAMPLE
  cat <EOF >> .ssh/config
  Host gitolite-haiku
       User gitolite3
       Hostname haiku
       ForwardAgent no
       ForwardX11 no     
       IdentityFile ~/.ssh/privkeys/id_gitolite-%u-%l-%r-%h
       PreferredAuthentications publickey
  EOF
#+END_EXAMPLE

Then, "just" (this is a lie) do

#+BEGIN_EXAMPLE
  $ vcsh clone gitolite3@haiku:dot-myrepos mr
  $ mr up
#+END_EXAMPLE

Some errors may occur from the =install.sh= script in the =ssh= area.  

#+BEGIN_EXAMPLE
  $ mkdir ~/.ssh/config.d/haiku
  $ mv ~/.ssh/config ~/.ssh/config.d/haiku/local.cfg
  $ cd ~/.ssh/config.d/haiku
  $ ln -s ../fragments/[...] .
  $ ~/.ssh/install.sh
#+END_EXAMPLE

Other errors will occur due to =.bashrc= or other files getting in the way of =vcsh= controlled copies.  Move them aside and thrash about to get things working smoothly.

One odd problem is that files under =~/.gitignore.d/= somehow get added to the individual repositories they control.  
