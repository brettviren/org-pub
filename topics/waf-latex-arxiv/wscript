#!/usr/bin/env python

APPNAME = "document"
VERSION = '0.0.0'

def options(opt):
    opt.load('tex')
    return

def configure(cfg):
    cfg.load('tex')
    cfg.env.append_value('PDFLATEXFLAGS','-halt-on-error')

def build(bld):
    
    bbl_tex = 'document-bib.tex'
    bld(features = 'tex',
        type = 'pdflatex',
        source = bbl_tex,
        outs = 'pdf',
        prompt = 0)

    bld.add_group()

    extensions = ['.tex','.pdf','.manifest','-%s.tar.gz'%VERSION]
    nodes = [bld.path.find_or_declare(APPNAME+ext) for ext in extensions]
    tex, pdf, man, tar = nodes

    bld(features = 'tex',
        type = 'pdflatex',
        source = tex,
        outs = 'pdf',
        prompt = 0)

    bld(rule = tarball,
        source = [man, tex],
        target = tar,
        prefix = APPNAME +'-'+ VERSION + '/', # needs trailing "/"
        extra = '**/document-bib.bbl ' + str(tex)
    )


import tarfile
def tarball(task):
    bld = task.generator.bld
    prefix, extra = task.generator.prefix, task.generator.extra

    globs = task.inputs[0].read() + ' ' + extra
    nodes = bld.path.ant_glob(globs)

    tfname = task.outputs[0].abspath()
    ext = os.path.splitext(tfname)[1][1:]
    with tarfile.open(tfname, 'w:'+ext, ) as tf:
        for node in nodes:
            tar_path = node.nice_path()
            if node.is_bld():
                tar_path = node.bldpath()
            tf.add(node.nice_path(), prefix + tar_path)

import os
from waflib.TaskGen import feature, after_method
@feature('tex') 
@after_method('apply_tex') 
def create_another_task(self): 
    tex_task = self.tasks[-1] 
    at = self.create_task('manifest', tex_task.outputs) 
    doc = tex_task.outputs[0]
    man = os.path.splitext(str(doc))[0] + '.manifest'
    man_node = self.bld.path.find_or_declare(man)
    at.outputs.append(man_node)
    at.tex_task = tex_task 
    # rebuild whenever the tex task is rebuilt 
    at.dep_nodes.extend(tex_task.outputs) 

from waflib.Task import Task
class manifest(Task):
    def run(self):
        man_node = self.outputs[0]
        self.outputs.append(man_node)
        idx = self.tex_task.uid() 
        nodes = self.generator.bld.node_deps[idx]
        with open(man_node.abspath(), 'w') as fp:
            for node in nodes:
                fp.write(node.nice_path() + '\n')
