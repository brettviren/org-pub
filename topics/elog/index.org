#+TITLE: ELog at BNL Physics Department
#+DATE: [2014-07-18 Fri 11:07]
#+DESCRIPTION: The ELog online logbook was selected for use by a few groups in BNL's Physics department.  This topic describes that selection, its setup and other related matters.
#+SETUPFILE: ~/org-pub/topics/setup.org

A few R&D groups, largely filled by members of the Electronic Detector Group in the BNL Physics department, recognized the need for an online logbook.  A survey was done to find what was available and [[http://midas.psi.ch/elog/][ELog]] was selected.  This documents the selection, prototyping and production setup.

* Comparison with other potential systems

ELog is by far the most popular system as judged by various Google searches.  There is also significant, prior experience with ELog among the primary users of the new system.  A few others were considered.

** Fermilab ECL

[[https://cdcvs.fnal.gov/redmine/projects/crl/wiki][ECL]] is a rewrite of a prior system from Fermilab called CRL but it had no expression of interest from the primaries.

** Evernote

[[../sci-log-book-comp/index.org][ELog and Evernote were compared]].   

** Bloknot

After the Evernote comparison was done another option was found in our own backyard.  This was [[http://bloknot.sourceforge.net/][bloknot]] written by our own Vlodya Tishchenko who uses it as his own personal logbook.  A few observations of this system

- It has many similarities to ELog in content, presentation, and backend storage method
- It's extensible through plugins (PHP).
- It supports HTML, plain text and markdown

While it was recognized that bloknot was very impressive it was not selected largely due to the greater familiarity the primaries have with ELog and the lack of expected community/support for bloknot.

* Access policy

The desired ELog access policy is:

 - auth is required to read or write, no anonymous access

 - read-write accounts are per-individual (no sharing)

 - read-only accounts may be shared

 - write-once, read always (no edits nor deletes by normal users)

 - admin level access may delete entries

 - otherwise, a flat access control, any read-write user can write to
   any logbook, any auth'ed user can read any logbook

* Logbook organization

The organization is to be a hierarchy of groups of logbooks.  At top level are "WbLS" and "LAr" for these two R&D efforts.  Future groups are expected.  Organization below this top level is up to the group.  One expected future expansion might be to add a "Summer Students" group with one logbook per student.

Initial groups

 - WbLS
 - LAr
 - Compton Scattering

* Installation

The =elogd= process will run as a dedicated user "=elog=" and will be monitored by [[http://supervisord.org/][supervisord]].  It will only listen on =localhost= and be exposed to the Internet via Apache (running as it's own user).  

** Prerequisite package installation

Assuming SL6.5.

Apache:

#+BEGIN_EXAMPLE
  # yum install httpd mod_ssl crypto-utils
#+END_EXAMPLE

To build ELog from source:

#+BEGIN_EXAMPLE
  # yum install git gcc openssl-devel 
#+END_EXAMPLE

** Prepare

Make the user to run the ELog daemon:

#+BEGIN_EXAMPLE
  $ sudo useradd -c "ELog Server" -d /home/elog -m -r -s /bin/bash elog
  $ sudo su - elog
#+END_EXAMPLE

** Install ELog

#+BEGIN_EXAMPLE
  $ mkdir code
  $ cd code
  $ git clone https://bitbucket.org/ritt/elog.git
  $ git clone https://bitbucket.org/tmidas/mxml.git
  $ cd elog
  $ make ROOT=/home/elog/opt
  $ make ROOT=/home/elog/opt install
#+END_EXAMPLE

** Initial Configure

#+BEGIN_EXAMPLE
  $ mkdir ~/cfg
  $ cd ~/cfg
  $ cp ~/code/elog/elogd.cfg .
  $ git init
  $ git add elogd.cfg
  $ git commit -a -m "First commit of default config."
#+END_EXAMPLE

** Test

#+BEGIN_EXAMPLE
  $ ~/opt/usr/local/sbin/elogd -c ~/cfg/elogd.cfg -s ~/opt/usr/local/elog -d ~/logbooks
#+END_EXAMPLE

And, visit: http://localhost:8080/

** Apache

In an Apache's SSL site config file's =VirtualHost= section, add:

#+BEGIN_EXAMPLE
  Redirect permanent / http://localhost:8080/
  ProxyPass / http://localhost:8080/
#+END_EXAMPLE

ELog needs to be told what URL to assume:

#+BEGIN_EXAMPLE
  [global]
  port = 8080
  URL = https://lycastus.phy.bnl.gov/elog/
#+END_EXAMPLE


** Supervisor

The =superviord= is used to keep Elog up and running.  Since nothing useful comes with Red Hat linux, we install it from source:

#+BEGIN_EXAMPLE
  $ cd ~/code
  $ wget https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.11.tar.gz
  $ tar -xvf virtualenv-1.11.tar.gz
  $ ./virtualenv-1.11/virtualenv
  $ source ./venv/bin/activate
  $ pip install supervisor
  $ emacs ~/cfg/supervisord.cfg ~/run-supervisord.sh
#+END_EXAMPLE

The config:

#+BEGIN_EXAMPLE
[supervisord]
#nada
[program:elog]
command=/home/elog/opt/usr/local/sbin/elogd -v -c /home/elog/cfg/elogd.cfg -s /home/elog/opt/usr/local/elog
#+END_EXAMPLE

The run script:

#+BEGIN_SRC shell
#!/bin/bash
source ~/code/venv/bin/activate
supervisord -c ~/cfg/supervisord.cfg
#+END_SRC

Run it:

#+BEGIN_EXAMPLE
  $ ~/run-supervisord.sh
#+END_EXAMPLE

Now, walk away.

* Configuration

In the [[Installation]] section is the minimum to get ELog to answer requests through Apache/SSL.  This section says how to configure ELog to implement the desired [[Access policy]].

** Devel Elog Config

The various human managed files for Elog is kept in the =gitosis@gateway.phy.bnl.gov:elog= git repository.  This lets changes be tested on a devel server before pushed and pulled down to the production server.  

Note, the =passwords= file is not version controlled as Elog updates it all the time.

Repeat the Elog installation.  For testing Elog one does not need Apache nor =supervisord= setup.  However, to keep the same paths in the configuration file, it is best to create an =elog= account and install things identically in =/home/elog= as above.

For the devel server:

#+BEGIN_EXAMPLE
  elog$ git clone gitosis@gateway.phy.bnl.gov:elog
  elog$ mv elog/* elog/.git* .
  elog$ rmdir elog
  elog$ ~/opt/usr/local/sbin/elogd -c ~/cfg/elogd.cfg -s ~/opt/usr/local/elog -n localhost
#+END_EXAMPLE

*Important note*: one must tweak the URL setting in the config file to match the testing server and the remember to return it before committing.

#+BEGIN_EXAMPLE
# production:
#URL = https://elog.phy.bnl.gov/
# testing:
URL = http://localhost:8080/
#+END_EXAMPLE

* Security

** Local file path leaks

ELog will leak local file system paths on 404.  This makes BNL Nessus cranky.  This patch comments out the offending bits.

#+BEGIN_SRC diff
  diff --git a/src/elogd.c b/src/elogd.c
  index 88b709f..277ba30 100755
  --- a/src/elogd.c
  +++ b/src/elogd.c
  @@ -8195,13 +8195,11 @@ void send_file_direct(char *file_name)
   
         rsprintf("<body><h1>Not Found</h1>\r\n");
         rsprintf("The requested file <b>");
  -      /* 
         strencode2(encodedname, file_name, sizeof(encodedname));
         if (strchr(file_name, DIR_SEPARATOR))
            rsprintf("%s", encodedname);
         else
            rsprintf("%s%c%s", dir, DIR_SEPARATOR, encodedname);
  -      */
         rsprintf("</b> was not found on this server<p>\r\n");
         rsprintf("<hr><address>ELOG version %s</address></body></html>\r\n\r\n", VERSION);
         return_length = strlen_retbuf;

#+END_SRC
