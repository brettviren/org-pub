#+TITLE: Using PGP With GnuPG
#+SUBTITLE: Notes on how I use PGP/GPG
#+CATEGORY: Security
#+TAGS: crypto,gpg,notes,cmdline
#+DATE: [2015-07-07 Tue 20:23]
#+DESCRIPTION: Using GnuPG can be tricky and details and this note keeps track.
#+SETUPFILE: ~/org-pub/topics/setup.org

In 2005 I made a [[http://pgp.mit.edu/pks/lookup?op=vindex&search=0x122C47D99D1D282C][PGP Key]].  This note documents various aspects of interacting with my key.

* Keys

My new 2015 key.  See next section for how I upgraded.

#+BEGIN_EXAMPLE
pub   4096R/97A51B47 2015-07-08
      Key fingerprint = F37E 5F67 394D 3592 5D37  EE66 5B00 71E0 97A5 1B47
uid                  Brett Viren <bv@bnl.gov>
sub   4096R/3F58C5C6 2015-07-08
#+END_EXAMPLE

My initial 2005 key.

#+BEGIN_EXAMPLE
$ gpg --fingerprint --list-keys 9D1D282C
pub   1024D/9D1D282C 2005-12-20
      Key fingerprint = 04A6 309A D560 D339 D027  2924 122C 47D9 9D1D 282C
uid                  Brett Viren <bv@bnl.gov>
sub   2048g/C26A51C6 2005-12-20
#+END_EXAMPLE


* Key server

I'm [[https://help.riseup.net/en/security/message-security/openpgp/best-practices#selecting-a-keyserver-and-configuring-your-machine-to-refresh-your-keyring][told]] I should use an sks keyserver pool which is authenticated by a CA cert.

#+BEGIN_EXAMPLE
$ wget https://sks-keyservers.net/sks-keyservers.netCA.pem
$ openssl x509 -fingerprint -in sks-keyservers.netCA.pem|head -1
SHA1 Fingerprint=79:1B:27:A3:8E:66:7F:80:27:81:4D:4E:68:E7:C4:78:A4:5D:5A:17
#+END_EXAMPLE

=gpg.conf=:
#+BEGIN_EXAMPLE
keyserver hkps://hkps.pool.sks-keyservers.net
keyserver-options ca-cert-file=~/.gnupg/CA/sks-keyservers.netCA.pem
#+END_EXAMPLE


* Upgrading 

The 2005 key is a 1024D.  I want a larger 4096R one.  

** Getting started

I mostly followed [[http://ekaia.org/blog/2009/05/10/creating-new-gpgkey/][this post]] which seems to be what everyone follows.
It starts by recommending a few =gpg.conf= settings.  However, it
looks like =SHA512= is more common today that the =SHA256= that this
2009 blog post recomends.

#+BEGIN_EXAMPLE
  # default-key  9D1D282C
  personal-digest-preferences SHA512
  cert-digest-algo SHA512
  default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
#+END_EXAMPLE

** Creating the new key

Thanks [[http://keyring.debian.org/creating-key.html][Debian]].
Create the key with =gpg --gen-key= selecting option:
#+BEGIN_EXAMPLE
$ gpg --gen-key
...
   (1) RSA and RSA (default)
#+END_EXAMPLE

No comment as that's apparently considered "bad".  Meet the new me:

#+BEGIN_EXAMPLE
pub   4096R/97A51B47 2015-07-08
      Key fingerprint = F37E 5F67 394D 3592 5D37  EE66 5B00 71E0 97A5 1B47
uid                  Brett Viren <bv@bnl.gov>
sub   4096R/3F58C5C6 2015-07-08
#+END_EXAMPLE

Make it default in =gpg.conf=
#+BEGIN_EXAMPLE
  default-key  97A51B47
#+END_EXAMPLE

** Add my Gmail identity

I try to keep my work identity tied to my =bv@bnl.gov= email address
and all the rest tied to my =brett.viren@gmail.com= address.  I don't
currently have GPG well integrated with Gmail, even when sending via
GNUS, but I follow the guide and add this identity nonetheless.

#+BEGIN_EXAMPLE
$ gpg --edit-key 97A51B47

gpg> adduid
Real name: Brett Viren
Email address: brett.viren@gmail.com
Comment: 
You selected this USER-ID:
    "Brett Viren <brett.viren@gmail.com>"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o

You need a passphrase to unlock the secret key for
user: "Brett Viren <bv@bnl.gov>"
4096-bit RSA key, ID 97A51B47, created 2015-07-08


pub  4096R/97A51B47  created: 2015-07-08  expires: never       usage: SC  
                     trust: ultimate      validity: ultimate
sub  4096R/3F58C5C6  created: 2015-07-08  expires: never       usage: E   
[ultimate] (1)  Brett Viren <bv@bnl.gov>
[ unknown] (2). Brett Viren <brett.viren@gmail.com>

gpg> save
#+END_EXAMPLE


** Sign new with old

This is so that the new me recognizes the old me.

#+BEGIN_EXAMPLE
$ gpg --default-key 9D1D282C --sign-key 97A51B47
#+END_EXAMPLE


** Transition statement

It is recommended to write a transition statement and sign it with both keys.
The key components of such a statement are apparently:

- Affirm the transition is desired.
- List the key ID, date and fingerprint for the old and the new keys.
- State what you request others do with this transition information.
- For convenience of others, provide instructions on how to carry out
  the request.

My statements:

 - [[./transition-2005-to-2015.txt]], [[./transition-2005-to-2015.old.txt][signed by old key]], [[./transition-2005-to-2015.new.txt][signed by new key]]


* Subkeys

It seems that when the world wants to know about subkeys the world turns to the [[https://wiki.debian.org/Subkeys][Debian subkey wiki page]].  Here is a more [[https://alexcabal.com/creating-the-perfect-gpg-keypair/][coloquial coverage]] of the issue with some background.  Lots of good walk throughs at [[https://help.ubuntu.com/community/GnuPrivacyGuardHowto][this ubuntu wiki page]].

[[https://www.void.gr/kargig/blog/2013/12/02/creating-a-new-gpg-key-with-subkeys/][This here post]] gives the run down on the key types that =gpg -[kK]= shows

- =sec= :: SECret key
- =ssb= :: Secret SuBkey
- =pub= :: PUBlic key
- =sub= :: public SUBkey

Using =gpg --edit-key= prints a usage code

- =S= :: signing
- =C= :: certifying other signatures
- =E= :: encrypting
- =A= :: authentication

I'm going to start using [[../pass][pass]] and I (think I) want to use a dedicated encrypting subkey.

#+BEGIN_EXAMPLE
$ gpg --edit-key 0x5B0071E097A51B47
gpg> addkey
   ...
   (6) RSA (encrypt only)
Your selection? 6
What keysize do you want? (2048) 4096
Please specify how long the key should be valid.
         0 = key does not expire
...
Key is valid for? (0) 0
#+END_EXAMPLE

